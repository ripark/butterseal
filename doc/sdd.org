#+Title: Software Design Document
#+Author: Sean Allred
#+Date: [2013-11-02 Sat]
#+Description: This document details the design of the game internals drawing from the description of the game itself.

* Functional Requirements
** User Interface
The game has an interface consisting of
- navigation control
- tile interaction
- power interaction
- a way to choose a power

** World
The world consists of many maps joined together by a super-map.
The paradigm of Assassin's Creed is most applicable here:
  have each map (puzzle-maps) joined by classicly exploratory roads and settlements.
It is unknown whether each map corresponds to one puzzle;
  that is, it is unknown whether there are puzzle-less maps.
Their purpose needs to be entirely plot-oriented and
  thus their existence is, at this stage, impromptu.

See the [[file:~/github/vermiculus/butterseal/src/ButterSeal-android/assets/maps/map-descriptions.org][map description file]] for detailed information on each map.

* Implementation
** User Interface
A simplistic design would be as follows:

:   .                                                   .
:   .                                                   .
:   |                          s m a l l   p o w e r s  |
:   | +---------+     ...     +------+---------+------+ |
:   | |         |             |      |         |      | |
:   | |    D    |     ...     | <--- | Current | ---> | |
:   | |   Pad   |     ...     | <--- |  Power  | ---> | |
:   | |         |             |      |         |      | |
:   | +---------+     ...     +------+---------+------+ |
:   +---------------------------------------------------+

The D-Pad simply satisfies navigation control.
The "small powers" are scaled-down icons of each usable power (hereforth "ability")
  (including simple interaction,
  to be represented as a radial-symmetric star or similar).
Each ability can be selected by use of
  the arrows on either side of the large icon.
Selecting each ability highlights the corresponding icon above the control.
(This presumably aids in ability navigation.)
As a unit, this control satisfies the remaining user interface requirements.

On the desktop version, =AWSD= replace the directional pad,
  =Q= and =E= replace ability selection,
  and =SPC= activates the ability.
The "small powers" icon bar still exists,
  but in the upper-right corner instead.
Given that this is not a required platform, this functionality is optional.
However, the implementation is generic enough to allow this.

*** Specific Implementation

** World
The entire world is internally represented as a directed graph,
  where each map corresponds to a node in the graph.
Each and every map is a /Tiled/-created map.
A design description of each map is fully described
  in the [[file:~/github/vermiculus/butterseal/src/ButterSeal-android/assets/maps/map-descriptions.org][map description document]].
*** /Tiled/ Property Descriptions
/Tiled/ allows you to set properties for tiles of tile-sets used in its maps.
These allow for easy handling in the program logic, since you don't have to have pre-knowledge of how the map is laid out in advance.
To make this work, a standard has to be set that is common between the map-designer and the logic-designer so that collaboration is simple and effective.

- =wall= :: Set this property to denote an absolutely impassable object.
            Expects a value of =true= or =false= appropriately.
- =active= :: Set this property to denote if the tile is interactive.
              Expects a value of =true= or =false= appropriately.
- =player= :: Set this property to denote the starting tile of the map.
              The player will start on this tile; behavior is undefined for a map that has more than one tile with this property.
              Set =true= or =false= appropriately.
- =special= :: Set this property if the tile is special and should be handled as such in some way.
               For example, set =special=beacon= to trigger program logic specific to beacons, such as toggle lighting.

               Valid values are:
  - =beacon=
  - =torch=
  - =door=
  - =goal=
- =air= :: Set this property to denote an absolutely passable tile.
           That is, no matter what, you can walk through this tile.
           Set =true= or =false= appropriately.

*** Interacting with Maps
/Tiled/ allows us a consistent means to interact with the maps
  that will be generated by the map designer.
This consistency is only helpful when handled in kind,
  so the following are strictly adhered to.

The abstract class =BSMap inherits TiledMap= handles the highest level of interaction with any map.
This class has a =handleMove(xshift, yshift)= method that applies
  any initial logic that is specified,
  such as not allowing travel through walls
  and not allowing travel over ice without proper gear equipped.
=BSMap= also has an =abstract void handleSpecialMove(xshift, yshift)= that
  each child class /must/ implement for its own special handling, even if there is none.

Every /instantiable/ child class of =BSMap= corresponds to
  exactly one traversable map in the game.
